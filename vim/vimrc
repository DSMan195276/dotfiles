" Set non-vi-compatable mode
set nocp

" Turn on Syntax highlighting by default
syntax on

" Disable arrow-keys, mostly so I'm not tempted to use them
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" This simply makes the cursor move to the left one space with pasting with P
" It makes sure the cursor stays in the same location after pasting is done
nnoremap P Ph

" Makes cursor movements just move to the next on-screen row instead of next
" text row
nmap j gj
nmap k gk

" Keybindings for opening-closing NERD tree as well as putting MiniBufExplorer
" into focus
nmap <silent> <C-n> :NERDTreeToggle<CR>
nmap <silent> <C-i> :MiniBufExplorer<CR>

let NERDTreeChDirMode = 2
let NERDTreeShowBookmarks = 1

" Maps moving around open windows to C+hjkl (So Just hold Control and then
" move like normal).
nnoremap <silent> <C-h> <C-w><Left>
nnoremap <silent> <C-j> <C-w><Down> 
nnoremap <silent> <C-k> <C-w><Up>
nnoremap <silent> <C-l> <C-w><Right>

" handy, remap's W to play the q macro. Allows quick playback since I use q
" for one-time macros noremap  W @q
" While it looks weird (Since I had to use the actual excape character) all
" this does is map Alt+hjkl to resizing the current window. Handy, goes well
" with the above remaping of Control+hjkl, which was the idea
map <silent> h <C-w><
map <silent> j <C-W>-
map <silent> k <C-W>+
map <silent> l <C-w>>

" A few quick keybindings for compiling hte current file with QB64. It
" requires some extra scripts /usr/local/bin
map <silent> <C-C>l :let @" = expand("%:t:r")<CR>:!qb64_n <C-R>"<CR>
map <silent> <C-C>k :let @" = expand("%:t:r")<CR>:!qb64_p <C-R>"<CR>
map <silent> <C-C>h :let @" = expand("%:t:r")<CR>:!qb64_parse <C-R>"<CR>

" Map C-k to exit insert mode
inoremap <silent> <C-k> <Esc>
" Map C-p to paste inside of insert mode
imap <silent> <C-p> <C-k>pa
" Map Space to move one page down
nnoremap <Space> <C-f>
" Map Backspace to move one page up
nnoremap <Backspace> <C-b>

" Setup some filetypes for qb64 source files
autocmd BufRead,BufNewFile *.bm set filetype=qb64
autocmd BufRead,BufNewFile *.bi set filetype=qb64
autocmd BufRead,BufNewFile *.bas set filetype=qb64

" Set some tab settings
set tabstop=8
set shiftwidth=2
set noexpandtab

" Setup folding settings
" Note by default it's manual, so no automatic folding will ever happen
" having folding contually checked is extremly slow, so I avoid it
set foldmethod=manual
set foldexpr=GetPotionFold(v:lnum)
set foldnestmax=0

" Maps C-m to refiguring the fold's using the below function
nnoremap <silent> <C-m> :set foldmethod=expr<CR>:set foldmethod=manual<CR>

" This function handles folds for QB64 code
" It basically just folds on FUNCTION, SUB, TYPE blocks
function! GetPotionFold(lnum)
  if !(empty(matchstr(getline(a:lnum), '\c^FUNCTION '))) || !(empty(matchstr(getline(a:lnum), '\c^SUB ')))
    return '>1'
  elseif !(empty(matchstr(getline(a:lnum), '''@@$')))
    return '>1'
  elseif !(empty(matchstr(getline(a:lnum), '\c^TYPE ')))
    return '>1'
  elseif a:lnum - 1 > 0
    if !(empty(matchstr(getline(a:lnum - 1), '\c^END SUB'))) || !(empty(matchstr(getline(a:lnum - 1), '\c^END FUNCTION')))
      return '0'
    elseif !(empty(matchstr(getline(a:lnum - 1), '''@@@$')))
      return '0'
    elseif !(empty(matchstr(getline(a:lnum - 1), '\c^END TYPE')))
      return '0'
    endif
  endif
  return '=' 
endfunction

set statusline=%t       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c:     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" Nice little key combo to comment out all the selected code
map ,' :s/^/'/<CR>:nohlsearch<CR>

" Auto indent setup
set autoindent

set modeline
set modelines=5

set laststatus=2


" $TERM = "linux" in a normal VT console -- which my color settings don't work
" in. For everything else colors work as normal
if $TERM != "linux" && $TERM != "screen"
  " Set 256 color support, and a few extra settings for solarized
  set t_Co=256
  " let g:solarized_termcolors=256
  set background=dark

  " Display line numbers when not in a VT
  set number

  " Have the left column used to display current folds
  set foldcolumn=1
endif

if &diff " Colorscheme for Vimdiff
  color neverland2-darker
elseif $TERM != "linux" && $TERM != "screen" " Colorscheme for most terminals
  color neverland2-darker
else "Colorscheme for default VT
  color color16 
endif

if has('gui_running')
  set guioptions=i
  colorscheme neverland2-darker
endif

set guifont="Terminus 8"

" hide buffers when opening new files, don't hilight search results by
" default
set hidden
set nohlsearch

" Detect filetype's
filetype plugin on

" Setting for MiniBufExplorer to prevent some slowdown that can happen when
" switching between lots of buffers
let g:miniBufExplCheckDupeBufs=0

" Directory to hold swp files
set directory=/var/tmp/swp/

" In visual mode < and > indent or unindent the current lines
" By changing them to >gv and <gv, the current selected code is kept selected
" after an indent, allowing you to quicking do multiple indents without having
" to reselect the code
vnoremap <C-m> >gv

set mouse=a

let g:rainbow_active = 1
let g:rainbow_operators = 1
